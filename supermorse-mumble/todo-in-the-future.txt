Write a set of secure C++17 functions that will run in a custom Mumble server environment for handling user account recovery via email, and user account management.

Architecture and Constraints:

The functions will run as a dedicated Linux user, such as mumbleservice or Supermorse, who is a member of the mail group (for Maildir access) and dbaccess group (for MariaDB access).

No root privileges should be required.

This will run on a headless Linux server with Postfix and Dovecot for email handling.


Functional Requirements:

1. Connect to a MariaDB database to retrieve the username, password, and email for users.

2. Monitor a Maildir directory (e.g., /home/mumbleservice/Maildir/new/) for incoming messages.


3. For each email:

If the subject contains !reset or !password, and

The sender email address matches a user in the database

 (e.g., !reset )
→ then delete the username,password send an email back to the sender via SMTP, confirming that the username and password has been removed so that the user can register with a new username and password.

 (e.g., !password )
→ then send an email back to the sender via SMTP, with the users password.

4. If an email does not match these criteria and is older than 1 hour, delete it automatically to prevent spam buildup.

5. If a user hasn't been active for 30 days, delete that user account.
If there's 3 days of the countdown remaining, but no activity from the user send a polite email that reminds them that they haven't been active and their account will be deleted. This must happen at day 10,15 and 25.
( message: Hi, you haven't been active for XX days,  there's XX days before your account will be terminated. Bandwidth costs money.  Subject: reminder from Supermorse. )


Implementation Requirements:

Use libmariadb or compatible for DB access.

Use libcurl or sendmail-compatible method for sending email.

Use <filesystem> from C++17 for Maildir scanning and file age checks.

Ensure all logic is modular and secure: validate input, sanitize email addresses, and reject malformed requests.

All code should run non-interactively and be easily callable from the main Mumble server codebase.

The Mumble server must also run as a dedicated Linux user.

The Linux installation script must be modified to automatically set up the relevant users and groups + services.
Also check if the required packages already are installed.
